# Consider all integer combinations of a^b for 2 <= a <= 5 and 2 <= b <= 5:

# 2^2=4, 2^3=8, 2^4=16, 2^5=32
# 3^2=9, 3^3=27, 3^4=81, 3^5=243
# 4^2=16, 4^3=64, 4^4=256, 4^5=1024
# 5^2=25, 5^3=125, 5^4=625, 5^5=3125
# If they are then placed in numerical order, with any repeats removed, 
# we get the following sequence of 15 distinct terms:

# 4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125

# How many distinct terms are in the sequence generated by a^b for 2 <= a <= 100 and 2 <= b <= 100?

import math

def isPrime(n):
	for i in range(2, int(math.sqrt(n)) + 1):
		if n % i == 0:
			return False
	return True

primes = []
for i in range(2, 1001):
	if isPrime(i):
		primes.append(i)

# Returns the factors between 2 and n of n
def factorsOf(n):
	factors = []
	for i in range(2, int(n / 2) + 1):
		if n % i == 0:
			factors.append(i)
	factors.append(n)
	return factors

# Returns a tuple containing the prime factors of n and the lowest power of the factors
def primeFactors(n):
	factors = []
	lowestPower = -1
	i = 0
	while n > 1:
		p = 0
		while n % primes[i] == 0:
			factors.append(primes[i])
			n = n / primes[i]
			p += 1
		if p > 0 and (lowestPower == -1 or p < lowestPower):
			lowestPower = p
		i += 1
	return (factors, lowestPower)

def simplifyFactorisation(n):
	factors = [] # list of distinct factors of n
	lowestCommonPower = -1
	i = 0
	while n > 1:
		if n % primes[i] == 0:
			p = 0
			factors.append(primes[i])
			while n % primes[i] == 0:
				n = n / primes[i]
				p += 1
			if lowestCommonPower == -1 or p < lowestCommonPower:
				lowestCommonPower = p
		
		i += 1

	base = 1
	for f in factors:
		base = base * int(pow(f, lowestCommonPower))

a = math.sqrt(2) * math.sqrt(2)
print "%.50f" % math.ceil(a)

# distinctTerms = 0

# terms0 = []
# terms1 = []

# terms = [] # list of pairs (prime factorisation, power)

# for a in range(2, 10):
# 	for b in range(2, 10):

# 		t = int(pow(a, b))
# 		if t not in terms0:
# 			terms0.append(t)

# 		fp = primeFactors(a)
# 		factors = fp[0]
# 		leastPower = fp[1]

# # print(distinctTerms)
# print(terms0)
# print(terms1)

# print(primeFactors(8))